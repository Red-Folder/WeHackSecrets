import * as React from 'react';
import { Link, RouteComponentProps } from 'react-router-dom';
import { connect } from 'react-redux';
import { ApplicationState }  from '../store';
import * as ExploitsState from '../store/Exploits';

// At runtime, Redux will merge together...
type ExploitsProps =
    ExploitsState.ExploitsState        // ... state we've requested from the Redux store
    & typeof ExploitsState.actionCreators      // ... plus action creators we've requested
    & RouteComponentProps<{ }>; // ... plus incoming routing parameters

class FetchExploits extends React.Component<ExploitsProps, {}> {
    componentWillMount() {
        // This method runs when the component is first added to the page
        this.props.requestExploits();
    }

    componentWillReceiveProps(nextProps: ExploitsProps) {
        // This method runs when incoming props (e.g., route params) change
        this.props.requestExploits();
    }

    public render() {
        return <div>
            <h1>Exploits</h1>
            <p>This shows how well we are doing</p>
            { this.renderExploitsTable() }
        </div>;
    }

    private renderExploitsTable() {
        return <table className='table'>
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Success</th>
                    <th>Secret Value</th>
                </tr>
            </thead>
            <tbody>
            {this.props.exploits.map(exploit =>
                <tr key={exploit.id}>
                    <td>{ exploit.id}</td>
                    <td>{ exploit.exploited }</td>
                    <td>{ exploit.value }</td>
                </tr>
            )}
            </tbody>
        </table>;
    }
}

export default connect(
    (state: ApplicationState) => state.exploits, // Selects which state properties are merged into the component's props
    ExploitsState.actionCreators                 // Selects which action creators are merged into the component's props
)(FetchExploits) as typeof FetchExploits;
