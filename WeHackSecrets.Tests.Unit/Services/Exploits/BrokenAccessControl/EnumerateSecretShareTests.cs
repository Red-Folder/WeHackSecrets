using Moq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WeHackSecrets.Services.Actions;
using WeHackSecrets.Services.Exploits.BrokenAccessControl;
using Xunit;

namespace WeHackSecrets.Tests.Unit.Services.Exploits.BrokenAccessControl
{
    public class EnumerateSecretShareTests
    {
        [Fact]
        public void ConstructorWithNoTargetKeyThrowsArgumentException()
        {
            var ex = Assert.Throws<ArgumentNullException>(() =>
                new EnumerateSecretShare(null, null)
            );

            Assert.Contains("targetKey", ex.Message);
        }

        [Fact]
        public void ConstructorWithNoSecretsListThrowsArgumentException()
        {
            var ex = Assert.Throws<ArgumentNullException>(() =>
                new EnumerateSecretShare("TargetKey", null)
            );

            Assert.Contains("sharesList", ex.Message);
        }

        [Fact]
        public void SuccessfulFalseOnConstruction()
        {
            var mockList = new SecretsListBuilder().Build();
            var objectList = mockList.Select(x => x.Object).ToList();

            var sut = new EnumerateSecretShare("TargetKey", objectList);

            Assert.False(sut.Successful);
        }

        [Fact]
        public void SecretValueEmptyOnConstruction()
        {
            var mockList = new SecretsListBuilder().Build();
            var objectList = mockList.Select(x => x.Object).ToList();

            var sut = new EnumerateSecretShare("TargetKey", objectList);

            Assert.Empty(sut.SecretValue);
        }

        [Fact]
        public void SuccessfulExploit()
        {
            var mockList = new SecretsListBuilder()
                            .AddValid()
                            .Build();
            var objectList = mockList.Select(x => x.Object).ToList();

            var sut = new EnumerateSecretShare("TargetKey", objectList);

            sut.Exploit();
            mockList.ForEach(x => x.VerifyAll());
            Assert.True(sut.Successful);
            Assert.Equal("Secret1234", sut.SecretValue);
        }


        [Fact]
        public void FailedExploit()
        {
            var mockList = new SecretsListBuilder()
                            .AddInvalid()
                            .Build();
            var objectList = mockList.Select(x => x.Object).ToList();

            var sut = new EnumerateSecretShare("TargetKey", objectList);

            sut.Exploit();
            mockList.ForEach(x => x.VerifyAll());
            Assert.False(sut.Successful);
            Assert.Empty(sut.SecretValue);
        }

        [Fact]
        public void ExceptionDuringSecretList()
        {
            var mockList = new SecretsListBuilder()
                            .AddException()
                            .Build();
            var objectList = mockList.Select(x => x.Object).ToList();

            var sut = new EnumerateSecretShare("TargetKey", objectList);

            sut.Exploit();

            Assert.False(sut.Successful);
            Assert.Empty(sut.SecretValue);
        }


        [Fact]
        public void SuccessfulExploitAfterFailedAndException()
        {
            var mockList = new SecretsListBuilder()
                            .AddInvalid()
                            .AddException()
                            .AddValid()
                            .Build();
            var objectList = mockList.Select(x => x.Object).ToList();

            var sut = new EnumerateSecretShare("TargetKey", objectList);

            sut.Exploit();
            mockList.ForEach(x => x.VerifyAll());
            Assert.True(sut.Successful);
            Assert.Equal("Secret1234", sut.SecretValue);
        }

    }
}
