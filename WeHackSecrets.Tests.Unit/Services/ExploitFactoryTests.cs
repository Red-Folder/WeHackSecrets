using Moq;
using System;
using System.Collections.Generic;
using System.Text;
using WeHackSecrets.Services;
using Xunit;

namespace WeHackSecrets.Tests.Unit.Services
{
    public class ExploitFactoryTests
    {
        [Fact]
        public void ConstructorWithoutServiceProviderThrowsArgumentException()
        {
            var ex = Assert.Throws<ArgumentNullException>(() =>
                new ExploitFactory(null, null, null, null)
            );

            Assert.Contains("serviceProvider", ex.Message);
        }

        [Fact]
        public void ConstructorWithoutHackerUserThrowsArgumentException()
        {
            var serviceProvider = new Mock<IServiceProvider>();

            var ex = Assert.Throws<ArgumentNullException>(() =>
                new ExploitFactory(serviceProvider.Object, null, null, null)
            );

            Assert.Contains("hackerUser", ex.Message);
        }

        [Fact]
        public void ConstructorWithoutTargetUserThrowsArgumentException()
        {
            var serviceProvider = new Mock<IServiceProvider>();

            var ex = Assert.Throws<ArgumentNullException>(() =>
                new ExploitFactory(serviceProvider.Object, "HackerUser", null, null)
            );

            Assert.Contains("targetUser", ex.Message);
        }

        [Fact]
        public void ConstructorWithoutTargetKeyThrowsArgumentException()
        {
            var serviceProvider = new Mock<IServiceProvider>();

            var ex = Assert.Throws<ArgumentNullException>(() =>
                new ExploitFactory(serviceProvider.Object, "HackerUser", "TargetUser", null)
            );

            Assert.Contains("targetKey", ex.Message);
        }

        // Don't see a means of how to test GetExploits without seeding the serviceProvider with every exploit dependency
    }
}
